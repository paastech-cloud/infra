version: "3.9"

services:
  api:
    image: ghcr.io/paastech-cloud/api:0.1.0
    container_name: paastech-api
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:15.3-alpine3.18
    container_name: paastech-db
    volumes:
      - ./.db_data:/var/lib/postgresql/data:rw
    healthcheck:
      test: /usr/local/bin/pg_isready -U paastech -d paastech
      interval: 5s
      timeout: 10s
      retries: 4
    environment:
      POSTGRES_DB: paastech
      POSTGRES_USER: paastech
      POSTGRES_PASSWORD: paastech

  git-repo-manager: 
    image: ghcr.io/paastech-cloud/git-repo-manager:latest
    pull_policy: always
    container_name: paastech-git-repo-manager
    environment:
      - GIT_REPOSITORY_BASE_PATH=/srv
      - GIT_HOOKS_BASE_PATH=/home/git
      - SERVER_PORT=50051
      - RUST_LOG=info
    volumes:
      - ./data/git/repositories:/srv
      - ./data/git/hooks:/home/git
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 128M
        reservations:
          cpus: "0.25"
          memory: 128M

  git-ssh-server:
    image: ghcr.io/paastech-cloud/git-ssh-server:latest
    pull_policy: always
    container_name: paastech-git-ssh-server
    depends_on:
      - db
    environment:
      - GIT_REPOSITORIES_FULL_BASE_PATH=/srv
      - GIT_POSTGRESQL_USERNAME=paastech
      - GIT_POSTGRESQL_PASSWORD=paastech
      - GIT_POSTGRESQL_DATABASE_NAME=paastech
      - GIT_POSTGRESQL_PORT=5432
      - GIT_POSTGRESQL_HOST=postgresql
      - GIT_HOST_SIGNER_PATH=/etc/ssh/keys/id_ed25519
    volumes:
      - ./data/git/repositories:/srv
      - ./data/git/ssh/keys:/etc/ssh/keys
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 128M
        reservations:
          cpus: "0.25"
          memory: 128M

  scheduler:
    image: ghcr.io/paastech-cloud/pomegranate:0.1.0
    container_name: paastech-scheduler
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - reverse-proxy
    env_file:
      - .env
    ports:
      - "50051:50051"
    networks:
      - internal

  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.10
    container_name: paastech-traefik
    ports:
      # The HTTP port
      - "80:80"
      - "443:443"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      # Let's encrypt certificates
      - ./letsencrypt:/letsencrypt
    command:
      - --providers.docker=true
      - --providers.docker.network=pomegranate-proxy-network
      # Default entrypoint, redirect to 443 (HTTPS)
      - --entryPoints.web.address=:80
      - --entryPoints.web.http.redirections.entryPoint.to=websecure
      - --entryPoints.web.http.redirections.entryPoint.scheme=https
      - --entryPoints.web.http.redirections.entryPoint.permanent=true

      # Secured endpoint
      - --entryPoints.websecure.address=:443
      - --entryPoints.websecure.http.tls.certResolver=letsencrypt
      - --entryPoints.websecure.http.tls.domains[0].main=${POMEGRANATE_FQDN}
      - --entryPoints.websecure.http.tls.domains[0].sans[0]=*.${POMEGRANATE_FQDN}

      - --certificatesResolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesResolvers.letsencrypt.acme.email=${POMEGRANATE_LETSENCRYPT_EMAIL}
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=${POMEGRANATE_LETSENCRYPT_PROVIDER}
    env_file:
      - .env
    networks:
      - pomegranate-proxy-network

networks:
  pomegranate-proxy-network:
    name: ${POMEGRANATE_DOCKER_NETWORK_NAME}
  internal:
    name: paastech-api-network
